<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>LIME Explanation Visualization</title>
    <script src="https://d3js.org/d3.v3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js"></script>
</head>
<body>
    <div id="chart-div"></div>
    <div id="text-div"></div>
    <div id="table-div"></div>
    <script>
        (function(global) {
            'use strict';

            class Explanation {
                constructor(class_names) {
                    this.names = class_names;
                    if (class_names.length < 10) {
                        this.colors = d3.scale.category10().domain(this.names);
                        this.colors_i = d3.scale.category10().domain(_.range(this.names.length));
                    } else {
                        this.colors = d3.scale.category20().domain(this.names);
                        this.colors_i = d3.scale.category20().domain(_.range(this.names.length));
                    }
                }

                show(exp, label, div) {
                    const svg = div.append('svg').style('width', '100%');
                    let colors = ['#5F9EA0', this.colors_i(label)];
                    let names = ['NOT ' + this.names[label], this.names[label]];
                    if (this.names.length == 2) {
                        colors = [this.colors_i(0), this.colors_i(1)];
                        names = this.names;
                    }
                    const plot = new BarChart(svg, exp, true, names, colors, true, 10);
                    svg.style('height', plot.svg_height + 'px');
                }

                show_raw_text(exp, label, raw, div, opacity = true) {
                    let colors = ['#5F9EA0', this.colors_i(label)];
                    if (this.names.length == 2) {
                        colors = [this.colors_i(0), this.colors_i(1)];
                    }
                    let word_lists = [[], []];
                    let max_weight = -1;

                    for (let [word, start, weight] of exp) {
                        if (weight > 0) {
                            word_lists[1].push([start, start + word.length, weight]);
                        } else {
                            word_lists[0].push([start, start + word.length, -weight]);
                        }
                        max_weight = Math.max(max_weight, Math.abs(weight));
                    }

                    if (!opacity) {
                        max_weight = 0;
                    }
                    this.display_raw_text(div, raw, word_lists, colors, max_weight, true);
                }

                show_raw_tabular(exp, label, div) {
                    div.classed('lime', true).classed('table_div', true);
                    const colors = ['#5F9EA0', this.colors_i(label)];
                    if (this.names.length == 2) {
                        colors = [this.colors_i(0), this.colors_i(1)];
                    }
                    const table = div.append('table');
                    const thead = table.append('tr');
                    thead.append('td').text('Feature');
                    thead.append('td').text('Value');
                    thead.style('color', 'black').style('font-size', '20px');

                    for (let [fname, value, weight] of exp) {
                        const tr = table.append('tr');
                        tr.style('border-style', 'hidden');
                        tr.append('td').text(fname);
                        tr.append('td').text(value);
                        if (weight > 0) {
                            tr.style('background-color', colors[1]);
                        } else if (weight < 0) {
                            tr.style('background-color', colors[0]);
                        } else {
                            tr.style('color', 'black');
                        }
                    }
                }

                hexToRgb(hex) {
                    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
                    return result ? {
                        r: parseInt(result[1], 16),
                        g: parseInt(result[2], 16),
                        b: parseInt(result[3], 16)
                    } : null;
                }

                applyAlpha(hex, alpha) {
                    const components = this.hexToRgb(hex);
                    return `rgba(${components.r}, ${components.g}, ${components.b}, ${alpha.toFixed(3)})`;
                }

                display_raw_text(div, raw_text, word_lists = [], colors = [], max_weight = 1, positions = false) {
                    div.classed('lime', true).classed('text_div', true);
                    div.append('h3').text('Text with highlighted words');
                    const highlight_tag = 'span';
                    const text_span = div.append('span').style('white-space', 'pre-wrap').text(raw_text);
                    let position_lists = word_lists;
                    if (!positions) {
                        position_lists = this.wordlists_to_positions(word_lists, raw_text);
                    }
                    let objects = [];
                    for (let i of _.range(position_lists.length)) {
                        position_lists[i].map(x => objects.push({ 'label': i, 'start': x[0], 'end': x[1], 'alpha': max_weight === 0 ? 1 : x[2] / max_weight }));
                    }
                    objects = _.sortBy(objects, x => x['start']);
                    let node = text_span.node().childNodes[0];
                    let subtract = 0;
                    for (let obj of objects) {
                        const word = raw_text.slice(obj.start, obj.end);
                        const start = obj.start - subtract;
                        const end = obj.end - subtract;
                        const match = document.createElement(highlight_tag);
                        match.appendChild(document.createTextNode(word));
                        match.style.backgroundColor = this.applyAlpha(colors[obj.label], obj.alpha);
                        const after = node.splitText(start);
                        after.nodeValue = after.nodeValue.substring(word.length);
                        node.parentNode.insertBefore(match, after);
                        subtract += end;
                        node = after;
                    }
                }

                wordlists_to_positions(word_lists, raw_text) {
                    const ret = [];
                    for (let words of word_lists) {
                        if (words.length === 0) {
                            ret.push([]);
                            continue;
                        }
                        const re = new RegExp("\\b(" + words.join('|') + ")\\b", 'gm');
                        let temp;
                        const list = [];
                        while ((temp = re.exec(raw_text)) !== null) {
                            list.push([temp.index, temp.index + temp[0].length]);
                        }
                        ret.push(list);
                    }
                    return ret;
                }
            }

            class BarChart {
                constructor(svg, exp, horizontal, names, colors, showText, textSize) {
                    this.svg = svg;
                    this.exp = exp;
                    this.horizontal = horizontal;
                    this.names = names;
                    this.colors = colors;
                    this.showText = showText;
                    this.textSize = textSize;

                    this.drawChart();
                }

                drawChart() {
                    const margin = { top: 20, right: 20, bottom: 30, left: 40 },
                        width = 960 - margin.left - margin.right,
                        height = 500 - margin.top - margin.bottom;

                    const x = d3.scale.linear()
                        .range([0, width]);

                    const y = d3.scale.ordinal()
                        .rangeRoundBands([0, height], .1);

                    const xAxis = d3.svg.axis()
                        .scale(x)
                        .orient("top");

                    const yAxis = d3.svg.axis()
                        .scale(y)
                        .orient("left");

                    const chart = this.svg
                        .attr("width", width + margin.left + margin.right)
                        .attr("height", height + margin.top + margin.bottom)
                        .append("g")
                        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                    x.domain([0, d3.max(this.exp, d => d[1])]);
                    y.domain(this.exp.map(d => d[0]));

                    chart.append("g")
                        .attr("class", "x axis")
                        .call(xAxis);

                    chart.append("g")
                        .attr("class", "y axis")
                        .call(yAxis);

                    chart.selectAll(".bar")
                        .data(this.exp)
                        .enter().append("rect")
                        .attr("class", "bar")
                        .attr("x", 0)
                        .attr("y", d => y(d[0]))
                        .attr("width", d => x(d[1]))
                        .attr("height", y.rangeBand())
                        .style("fill", d => this.colors[d[1] > 0 ? 1 : 0]);

                    if (this.showText) {
                        chart.selectAll(".text")
                            .data(this.exp)
                            .enter().append("text")
                            .attr("class", "text")
                            .attr("x", d => x(d[1]) - 3)
                            .attr("y", d => y(d[0]) + y.rangeBand() / 2)
                            .attr("dy", ".35em")
                            .style("font-size", this.textSize + "px")
                            .style("fill", "white")
                            .style("text-anchor", "end")
                            .text(d => d[1]);
                    }

                    this.svg_height = height + margin.top + margin.bottom;
                }
            }

            // Example usage
            global.onload = function () {
                const explanation = new Explanation(['Negative', 'Positive']);
                const exp = [['feature1', 0.5], ['feature2', -0.3], ['feature3', 0.2]];
                const label = 1;
                const div = d3.select('#chart-div');
                explanation.show(exp, label, div);

                const raw_text = "This is a sample text for explanation.";
                const word_exp = [['sample', 10, 0.6], ['explanation', 27, -0.4]];
                const text_div = d3.select('#text-div');
                explanation.show_raw_text(word_exp, label, raw_text, text_div);

                const tabular_exp = [['feature1', 5, 0.5], ['feature2', 3, -0.3]];
                const table_div = d3.select('#table-div');
                explanation.show_raw_tabular(tabular_exp, label, table_div);
            };

        }(window));
    </script>
</body>
</html>
